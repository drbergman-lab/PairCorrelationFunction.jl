var documenterSearchIndex = {"docs":
[{"location":"#PairCorrelationFunction","page":"Home","title":"PairCorrelationFunction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for PairCorrelationFunction.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#PairCorrelationFunction.Constants","page":"Home","title":"PairCorrelationFunction.Constants","text":"Constants(xlims::Tuple{Float64, Float64}, ylims::Tuple{Float64, Float64}[, zlims::Tuple{Float64, Float64}], dr::Real)\n\nA struct to hold the constants needed for the pair correlation function calculation.\n\nThe vector of radii that define the concentric annuli must have constant spacing. You may either pass in the spacing dr or a range of radii in the form r0:dr:rf.\n\nFields\n\ngrid_size::NTuple{N, Float64}: The size of the grid in each dimension.\nbase_point::NTuple{N, Float64}: The base point of the grid to be used to calculate distance to the boundary.\ndomain_volume::Float64: The volume of the domain.\nradii::AbstractRange{<:Real}: The range of radii to be used for the pair correlation function.\nradii2::AbstractVector{<:Real}: The squared values of the radii.\n\nExamples\n\nusing PairCorrelationFunction\nxlims = (-450.0, 450.0)\nylims = (-450.0, 450.0)\nradii = 0:20.0:1300.0\nconstants = Constants(xlims, ylims, radii)\n# output\nConstants for 2D pair correlation function:\n  grid_size: (900.0, 900.0)\n  base_point: (-450.0, -450.0)\n  domain_volume: 810000.0\n  radii: 0.0 - 1300.0\n  #annuli: 65\n\nusing PairCorrelationFunction\nxlims = (-450.0, 450.0)\nylims = (-450.0, 450.0)\nzlims = (-450.0, 450.0)\ndr = 100.0\nconstants = Constants(xlims, ylims, zlims, dr)\n# output\nConstants for 3D pair correlation function:\n  grid_size: (900.0, 900.0, 900.0)\n  base_point: (-450.0, -450.0, -450.0)\n  domain_volume: 7.29e8\n  radii: 0.0 - 1600.0\n  #annuli: 16\n\n\n\n\n\n","category":"type"},{"location":"#PairCorrelationFunction.PCFResult","page":"Home","title":"PairCorrelationFunction.PCFResult","text":"PCFResult\n\nA struct to hold the results of the pair correlation function calculation.\n\nFor a single sample/timepoint, the g field will be a vector of pair correlation function values. For multiple samples/timepoints, the g field will be a matrix where each column corresponds to a sample/timepoint.\n\nThe hcat function is overloaded to allow for easy concatenation of multiple PCFResult objects. See example below.\n\nFields\n\nradii::AbstractVector{<:Real}: The range of radii used for the pair correlation function.\ng::AbstractArray{Float64}: The pair correlation function values for each radius, possibly over many samples/timepoints.\n\nExample\n\nusing PairCorrelationFunction\nradii = [0.0, 1.0, 2.0]\ng = [0.5, 1.2]\nPairCorrelationFunction.PCFResult(radii, g)\n# output\nPCFResult:\n  Radii: 0.0 - 2.0 with 2 annuli\n  g: 0.5 - 1.2 (min - max)\n\nusing PairCorrelationFunction\nradii = 0.0:1.0:2.0\nresult_1 = PairCorrelationFunction.PCFResult(radii, [0.5, 1.2])\nresult_2 = PairCorrelationFunction.PCFResult(radii, [0.6, 1.3])\nresult_3 = PairCorrelationFunction.PCFResult(radii, [0.8, 1.4])\nhcat(result_1, result_2, result_3)\n# output\nPCFResult:\n  #timepoints: 3\n  Radii: 0.0 - 2.0 with 2 annuli\n  g: 0.5 - 1.4 (min - max)\n\n\n\n\n\n","category":"type"},{"location":"#PairCorrelationFunction._histcounts_include_min!-Tuple{Vector{Int64}, Vector{Float64}, AbstractRange{<:Real}}","page":"Home","title":"PairCorrelationFunction._histcounts_include_min!","text":"_histcounts_include_min!(N::Vector{Int}, x::Vector{Float64}, xedges::AbstractRange{<:Real})\n\nLike histcounts!, but includes the minimum edge of the histogram in the first bin.\n\nThis function relies on xedges[1]==0.0 and the input x being all distances to guarantee no value is less than 0. Users can pass in radii with any upper bound and nothing stops the targets from being outside the domain, so we cannot guarantee that the maximum value of x is less than or equal to the maximum value of xedges.\n\n\n\n\n\n","category":"method"},{"location":"#PairCorrelationFunction.pcf-Tuple{AbstractMatrix{<:Real}, AbstractMatrix{<:Real}, Constants}","page":"Home","title":"PairCorrelationFunction.pcf","text":"pcf(centers::AbstractMatrix{<:Real}, targets::AbstractMatrix{<:Real}, constants::Constants)\n\nCalculate the pair correlation function for a set of centers and targets.\n\nFor each point in the centers matrix, compute the distance to each point in the targets matrix. Bin these distances by the radii defined in the constants object. If targets is not provided, the function will use centers as both centers and targets. Technically, this is the traditional pcf. The version with centers and targets is the cross-PCF.\n\nArguments\n\ncenters::AbstractMatrix{<:Real}: A matrix of centers, where each row is a center.\ntargets::AbstractMatrix{<:Real}: A matrix of targets, where each row is a target.\nconstants::Constants: A Constants object containing the grid size, base point, domain volume, and radii.\n\nReturns\n\nPCFResult: A struct with the radii and the pair correlation function values.\n\n\n\n\n\n","category":"method"},{"location":"#PairCorrelationFunction.pcfplot","page":"Home","title":"PairCorrelationFunction.pcfplot","text":"pcfplot\n\nPlot the pair correlation function.\n\nArguments\n\nThe function accepts 1, 2, or 3 arguments. In all three cases, the objects containing the PCF values are in the final of these arguments either as single instances or as vectors of instances.\n\nVectors\n\nIf the PCF values are all vectors, this will assume that these are independent realizations of the same process and will plot a mean and standard deviation. In this case, an optional first argument can be passed to specify the radii. If omitted, then the radii will be inferred from the PCFResult objects or, in the case Vector{<:Real} are passed in, the radii will be the vector indices, i.e. 1:length(g).\n\nMatrices\n\nIf the PCF values are all matrices, this will assume that each column is a different timepoint and will plot a heatmap of the mean across all samples (each matrix representing a timeseries sample). In this case, two optional first arguments can be passed to specify the timepoints and radii, respectively. If providing these arguments, the radii argument can be omitted ONLY IF the PCF values are passed in as PCFResult objects, i.e., they have the radii stored in the radii field. This ordering is because we assume that the time will be displayed on the x-axis. To swap the axes, transpose the matrices; then, pass in the timepoints as the second argument and the radii as the first argument. If neither are passed in, the radii will be inferred as for the vectors; timepoints will be the indices of the columns of the matrices, i.e. 1:size(g, 2).\n\nOptional arguments\n\nWhen plotting a heatmap, i.e., matrices, pcfplot will use the :tofino colorscheme by default. This can be changed by passing in a keyword argument colorscheme with the desired colorscheme. See the Plots-supported color schemes for more options. So long as color is not user-defined, then pcfplot use this scheme and will further set the color scheme to transition at the pcf value 1 to highlight the transition from depletion to enrichment.\n\nExamples\n\nusing PairCorrelationFunction\nusing Plots\ng = [0.5; 1.2; 0.8; 0.7; 0.6; 1.6]\npcfplot(g)\n\nusing PairCorrelationFunction\nusing Plots\ng1 = [0.5; 1.2; 0.8; 0.7; 0.6; 1.6]\ng2 = [0.9; 1.0; 1.1; 1.2; 1.3; 1.4]\npcfplot([g1, g2])\n\nusing PairCorrelationFunction\nusing Plots\ng = [0.5 1.2 0.8;\n     0.7 0.6 1.6;\n     0.9 1.0 1.1;\n     1.2 1.3 1.4;\n     1.5 1.6 1.7]\npcfplot(g; colorscheme=:cork)\n\nusing PairCorrelationFunction\nusing Plots\nresult = PairCorrelationFunction.PCFResult(0:20.0:100.0, [0.1; 0.2; 0.3; 0.4; 0.5])\npcfplot(result)\n\nusing PairCorrelationFunction\nusing Plots\nresult1 = PairCorrelationFunction.PCFResult(0:20.0:100.0, [0.1; 0.2; 0.3; 0.4; 0.5])\nresult2 = PairCorrelationFunction.PCFResult(0:20.0:100.0, [0.6; 0.7; 0.8; 0.9; 1.0])\nRESULT = hcat(result1, result2)\npcfplot([100.0, 200.0], RESULT) # use radii in RESULT for y-axis\npcfplot([100.0, 200.0], 0:20.0:100.0, RESULT) # explicitly pass in radii\n\n\n\n\n\n","category":"function"}]
}
